{"version":3,"sources":["components/GameOptions/index.js","components/Header/index.js","components/PhotoCard/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["GameOptions","props","className","message","id","onClick","startGame","Header","score","top","PhotoCard","checkClicked","alt","src","Wrapper","children","App","state","game","activeCards","cards","clicked","topScore","wins","level","randomCardIndices","cardsArray","length","random","Math","trunc","includes","push","i","currentIndexValue","setState","console","log","chosenLevel","shuffle","array","temporaryValue","randomIndex","currentIndex","floor","currentClicked","currentActive","shuffled","currentScore","currentWins","content","this","map","card","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55ad9d1f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction GameOptions(props) {\r\n  return (\r\n    <div className=\"optionsContainer\">\r\n      <h3>{props.message}</h3>\r\n      <div className=\"buttonHolder\">\r\n        <button id=\"easy\" className=\"gameLevel\" onClick={() => props.startGame(\"easy\")}>Easy</button>\r\n        <button id=\"medium\" className=\"gameLevel\" onClick={() => props.startGame(\"medium\")}>Medium</button>\r\n        <button id=\"hard\" className=\"gameLevel\" onClick={() => props.startGame(\"hard\")}>Hard</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOptions;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header>\r\n      <h1 className=\"title\">Swiss Memory Game</h1>\r\n      <h2>Click an image to begin!</h2>\r\n      <h2>Score: {props.score}</h2>\r\n      <h2>Top Score: {props.top}</h2>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction PhotoCard(props) {\r\n  return (\r\n    <div className=\"card\" onClick={() => props.checkClicked(props.id)}>\r\n      <div className=\"img-container\">\r\n        <img alt={props.alt} src={props.src} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PhotoCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport GameOptions from \"./components/GameOptions\";\r\nimport Header from \"./components/Header\";\r\nimport PhotoCard from \"./components/PhotoCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport cards from \"./cards.json\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    game: \"start\",\r\n    activeCards: cards,\r\n    clicked: [],\r\n    score: 0,\r\n    topScore: 0,\r\n    wins: 0\r\n  };\r\n\r\n  startGame = level => {\r\n    let randomCardIndices = [];\r\n    let cardsArray = [];\r\n    switch (level) {\r\n      case \"easy\":\r\n        while (randomCardIndices.length < 8) {\r\n          let random = Math.trunc(Math.random() * 24);\r\n          if (randomCardIndices.includes(random) !== true) {\r\n            randomCardIndices.push(random);\r\n          }\r\n        }\r\n        for (let i = 0; i < randomCardIndices.length; i++) {\r\n          let currentIndexValue = randomCardIndices[i];\r\n          cardsArray.push(cards[currentIndexValue]);\r\n        }\r\n        this.setState({ activeCards: cardsArray, game: \"play\", clicked: [], score: 0 });\r\n        console.log(cardsArray);\r\n        console.log(randomCardIndices);\r\n        break;\r\n      case \"medium\":\r\n        while (randomCardIndices.length < 16) {\r\n          let random = Math.trunc(Math.random() * 24);\r\n          if (randomCardIndices.includes(random) !== true) {\r\n            randomCardIndices.push(random);\r\n          }\r\n        }\r\n        for (let i = 0; i < randomCardIndices.length; i++) {\r\n          let currentIndexValue = randomCardIndices[i];\r\n          cardsArray.push(cards[currentIndexValue]);\r\n        }\r\n        this.setState({ activeCards: cardsArray, game: \"play\", clicked: [], score: 0 });\r\n        console.log(cardsArray);\r\n        console.log(randomCardIndices);\r\n        break;\r\n      case \"hard\":\r\n        while (randomCardIndices.length < 24) {\r\n          let random = Math.trunc(Math.random() * 24);\r\n          if (randomCardIndices.includes(random) !== true) {\r\n            randomCardIndices.push(random);\r\n          }\r\n        }\r\n        for (let i = 0; i < randomCardIndices.length; i++) {\r\n          let currentIndexValue = randomCardIndices[i];\r\n          cardsArray.push(cards[currentIndexValue]);\r\n        }\r\n        this.setState({ activeCards: cardsArray, game: \"play\", clicked: [], score: 0 });\r\n        console.log(cardsArray);\r\n        console.log(randomCardIndices);\r\n        break;\r\n      default:\r\n        console.log(\"ERROR\");\r\n    }\r\n    const chosenLevel = level;\r\n    console.log(chosenLevel);\r\n  }\r\n\r\n  shuffle= (array) => {\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  checkClicked = id => {\r\n    let currentClicked = this.state.clicked;\r\n    if (currentClicked.includes(id) !== true && currentClicked.length < 7) {\r\n      let currentActive = this.state.activeCards;\r\n      console.log(currentActive);\r\n      let shuffled = this.shuffle(currentActive);\r\n      console.log(shuffled);\r\n      currentClicked.push(id);\r\n      console.log(currentClicked);\r\n      let currentScore = this.state.score;\r\n      let currentTop = this.state.topScore;\r\n      currentScore++;\r\n      if (currentScore > currentTop) {\r\n        this.setState({ topScore: currentScore });\r\n      }\r\n      this.setState({ clicked: currentClicked, score: currentScore, activeCards : shuffled });\r\n    } else if (currentClicked.includes(id) !== true && currentClicked.length === 7) {\r\n      let currentActive = this.state.activeCards;\r\n      let shuffled = this.shuffle(currentActive);\r\n      console.log(shuffled);\r\n      let currentScore = this.state.score;\r\n      let currentTop = this.state.topScore;\r\n      currentScore++;\r\n      if (currentScore > currentTop) {\r\n        this.setState({ topScore: currentScore });\r\n      }\r\n      let currentWins = this.state.wins;\r\n      currentWins++;\r\n      this.setState({ wins: currentWins, game: \"win\", score: currentScore, activeCards : shuffled })\r\n    } else {\r\n      this.setState({ game: \"over\" });\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    let content;\r\n    switch (this.state.game) {\r\n      case \"start\":\r\n        content = <GameOptions startGame={this.startGame} message=\"Choose your difficulty: \" />\r\n        break;\r\n      case \"play\":\r\n        content = this.state.activeCards.map(card => (\r\n          <PhotoCard\r\n            checkClicked={this.checkClicked}\r\n            id={card.id}\r\n            key={card.id}\r\n            alt={card.alt}\r\n            src={card.src}\r\n          />\r\n        ))\r\n        break;\r\n      case \"over\":\r\n        content = <GameOptions startGame={this.startGame} message=\"Whoops! You had already clicked that image. Play Again? \"/>\r\n        break;\r\n      case \"win\":\r\n        content = <GameOptions startGame={this.startGame} message=\"You've successfully clicked through all the images. Play Again? \"/>\r\n        break;\r\n      default:\r\n        console.log(\"ERROR\");\r\n    }\r\n    return (\r\n      <Wrapper>\r\n        <Header score={this.state.score} top={this.state.topScore} />\r\n        {content}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}